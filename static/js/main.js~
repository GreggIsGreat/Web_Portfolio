document.addEventListener('DOMContentLoaded', () => {
    // Typed.js animation
    var typed = new Typed(".multiple-text", {
        strings: ["Data Scientist", "Developer", "Data Analyst", "Machine Learning Developer"],
        typeSpeed: 100,
        backSpeed: 100,
        backDelay: 1000,
        loop: true
    });

    // Function to update active nav link based on scroll position
    window.addEventListener('scroll', () => {
        let sections = document.querySelectorAll('section');
        let navLinks = document.querySelectorAll('.navbar a');

        sections.forEach(section => {
            let top = window.scrollY;
            let offset = section.offsetTop - 150;
            let height = section.offsetHeight;
            let id = section.getAttribute('id');

            if (top >= offset && top < offset + height) {
                navLinks.forEach(link => {
                    link.classList.remove('active');
                });
                document.querySelector('.navbar a[href*=' + id + ']')?.classList.add('active');
            }
        });
    });

    // Header scroll effect
    window.addEventListener('scroll', () => {
        const header = document.querySelector('.header');
        if (window.scrollY > 50) {
            header.classList.add('scrolled');
        } else {
            header.classList.remove('scrolled');
        }
    });

    // Enhanced Project Cards with Categories
    const projectData = [
        {
            name: "Driving School Management System",
            link: "https://github.com/GreggIsGreat/DrivingSchoolWebApp",
            description: "A comprehensive web application designed for driving schools to efficiently manage student registrations, lesson bookings, and instructor schedules. Built with Python and Django, it features a user-friendly interface, secure authentication, and a responsive dashboard for administrators to track student progress and manage payments.",
            category: "web",
            technologies: ["Python", "Django", "SQL", "HTML/CSS"],
            icon: "bx bx-car"
        },
        {
            name: "Olympic Analytical Dashboard + Prediction Model",
            link: "https://olympics-dashboard-ifhe.onrender.com",
            description: "An interactive dashboard that visualizes historical Olympic data and predicts medal counts for future games. Leveraging Python for data analysis and machine learning algorithms for predictions, this tool allows users to explore performance trends by country, sport, and year with customizable filters and beautiful visualizations.",
            category: "data",
            technologies: ["Python", "Pandas", "Machine Learning", "Data Visualization"],
            icon: "bx bx-line-chart"
        },
        {
            name: "Maverick Trading Android Application",
            link: "https://github.com/GreggIsGreat/Mavrick",
            description: "A feature-rich Android application for stock market trading and portfolio management. Developed with Java, it provides real-time stock data, personalized watchlists, and trade execution capabilities. Users can analyze market trends with interactive charts, set price alerts, and track their investment performance through an intuitive mobile interface.",
            category: "mobile",
            technologies: ["Java", "Android", "API Integration", "UI/UX"],
            icon: "bx bxl-android"
        },
        {
            name: "House Price Analysis + Prediction Model",
            link: "https://colab.research.google.com/drive/12whwft5WCk3tfkHG6n3CGDMq4wtWDcU0",
            description: "A sophisticated machine learning project that analyzes housing market data to predict property prices. Using advanced regression techniques and feature engineering, this model identifies key factors influencing home values. The interactive Colab notebook allows users to input property specifications and receive accurate price estimates based on current market conditions.",
            category: "data",
            technologies: ["Python", "Machine Learning", "Data Analysis", "Visualization"],
            icon: "bx bx-home"
        },
        {
            name: "Gold Stock Price Analysis + Prediction Model",
            link: "https://colab.research.google.com/drive/1P7lugZQDvZHQRkybPsIj-uvOwjU2wWuJ",
            description: "An advanced time series analysis project that forecasts gold price movements using historical data. Implementing ARIMA, LSTM, and other predictive models, this tool helps investors make informed decisions about gold investments. The interactive dashboard visualizes price patterns, volatility, and correlation with economic indicators for comprehensive market insights.",
            category: "data",
            technologies: ["Python", "Time Series Analysis", "Forecasting", "Data Science"],
            icon: "bx bx-trending-up"
        },
        {
            name: "AlphaPal Banking System",
            link: "https://github.com/GreggIsGreat/SecurePayProject2",
            description: "A secure and scalable banking system that handles customer accounts, transactions, and financial operations. Built with Java and incorporating robust security measures including encryption and multi-factor authentication, this platform provides a reliable solution for digital banking needs. Features include account management, transaction history, and automated notifications.",
            category: "web",
            technologies: ["Java", "Database", "Security", "Web Development"],
            icon: "bx bx-money"
        }
    ];

    const projectCardsContainer = document.querySelector('.project-cards');

    // Function to render project cards
    function renderProjects(category = 'all') {
        // Clear existing cards
        projectCardsContainer.innerHTML = '';

        // Filter projects based on category
        const filteredProjects = category === 'all'
            ? projectData
            : projectData.filter(project => project.category === category);

        // Check if there are any projects in the selected category
        if (filteredProjects.length === 0) {
            projectCardsContainer.innerHTML = `
                <div class="no-projects">
                    <p>No projects found in this category.</p>
                </div>
            `;
            return;
        }

        // Render filtered projects
        filteredProjects.forEach(project => {
            const card = document.createElement('div');
            card.classList.add('project-card');
            card.setAttribute('data-category', project.category);

            // Create technologies badges HTML
            const techBadges = project.technologies.map(tech =>
                `<span class="tech-badge">${tech}</span>`
            ).join('');

            card.innerHTML = `
                <i class="card-icon ${project.icon}"></i>
                <h3>${project.name}</h3>
                <p style="max-height: 150px; overflow-y: auto;">${project.description}</p>
                <div class="tech-badges">
                    ${techBadges}
                </div>
                <a href="${project.link}" target="_blank" class="card-btn">View Project</a>
            `;

            projectCardsContainer.appendChild(card);

            // Add animation to make cards appear with a slight delay
            setTimeout(() => {
                card.style.opacity = '1';
                card.style.transform = 'translateY(0)';
            }, 100 * (projectCardsContainer.children.length));
        });
    }

    // Initial render of all projects
    renderProjects();

    // Set up filter buttons
    const filterButtons = document.querySelectorAll('.filter-btn');
    filterButtons.forEach(button => {
        button.addEventListener('click', () => {
            // Remove active class from all buttons
            filterButtons.forEach(btn => btn.classList.remove('active'));

            // Add active class to clicked button
            button.classList.add('active');

            // Get filter category and render projects
            const filterCategory = button.getAttribute('data-filter');
            renderProjects(filterCategory);
        });
    });

    // Animate progress bars when they come into view
    const animateProgressBars = () => {
        const progressBars = document.querySelectorAll('.progress');
        const triggerBottom = window.innerHeight * 0.8;

        progressBars.forEach(bar => {
            const barTop = bar.getBoundingClientRect().top;

            if (barTop < triggerBottom) {
                const width = bar.parentElement.previousElementSibling.lastElementChild.textContent;
                bar.style.width = width;
            } else {
                bar.style.width = '0';
            }
        });
    };

    // Run animation on scroll
    window.addEventListener('scroll', animateProgressBars);

    // Run animation on initial load
    setTimeout(animateProgressBars, 500);
});